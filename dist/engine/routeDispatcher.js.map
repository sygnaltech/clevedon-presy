{
  "version": 3,
  "sources": ["../../src/engine/routeDispatcher.ts"],
  "sourcesContent": ["/*\r\n * Sygnal\r\n * Route Dispatcher\r\n * \r\n */\r\n\r\n//import { Site } from \"../site\";\r\n\r\n\r\n \r\n\r\nexport interface IRouteHandler {\r\n\r\n    setup(): void;\r\n    \r\n    exec(): void; \r\n  \r\n}\r\n\r\n  \r\ntype RouteHandler = () => void;\r\ntype RouteHandlerClass = { new (): IRouteHandler };\r\n\r\n\r\nexport interface Routes {\r\n    [path: string]: RouteHandlerClass;\r\n}\r\n\r\nexport class RouteDispatcher {\r\n\r\n    routes!: Routes;\r\n    _SiteClass: RouteHandlerClass;\r\n\r\n    constructor(SiteClass: RouteHandlerClass) {\r\n        this._SiteClass = SiteClass;\r\n    }\r\n\r\n    matchRoute(path: string): RouteHandlerClass | null {\r\n        for (const route in this.routes) {\r\n            if (route.endsWith('*')) {\r\n                // If the route ends with *, treat it as a wildcard\r\n                const baseRoute = route.slice(0, -1); // Remove the * from the end\r\n                if (path.startsWith(baseRoute)) {\r\n                    return this.routes[route];\r\n                }\r\n            } else if (route === path) {\r\n                // Exact match\r\n                return this.routes[route];\r\n            }\r\n        }\r\n        return null; // No matching route found\r\n    }\r\n    \r\n    setupRoute() {\r\n\r\n        // Pre-init site-level \r\n        const site = new this._SiteClass();\r\n        site.setup(); \r\n//        (new Site().setup());\r\n\r\n        // Pre-init route-level\r\n        const path = window.location.pathname;\r\n        const HandlerClass = this.matchRoute(path);\r\n        if (HandlerClass) {\r\n            const handlerInstance = new HandlerClass();\r\n            handlerInstance.setup(); \r\n        } else {\r\n//            console.log('No specific function for this path.');\r\n        }\r\n    }\r\n\r\n    execRoute() {\r\n\r\n        // Init site-level\r\n        const site = new this._SiteClass();\r\n        site.exec(); \r\n//        (new Site().exec());\r\n\r\n        // Init route-level\r\n        const path = window.location.pathname;\r\n        const HandlerClass = this.matchRoute(path);\r\n        if (HandlerClass) {\r\n            const handlerInstance = new HandlerClass();\r\n            handlerInstance.exec(); \r\n        } else {\r\n//            console.log('No specific function for this path.');\r\n        }\r\n    }\r\n    \r\n}"],
  "mappings": ";;;AA4BO,MAAM,kBAAN,MAAsB;AAAA,IAKzB,YAAY,WAA8B;AACtC,WAAK,aAAa;AAAA,IACtB;AAAA,IAEA,WAAW,MAAwC;AAC/C,iBAAW,SAAS,KAAK,QAAQ;AAC7B,YAAI,MAAM,SAAS,GAAG,GAAG;AAErB,gBAAM,YAAY,MAAM,MAAM,GAAG,EAAE;AACnC,cAAI,KAAK,WAAW,SAAS,GAAG;AAC5B,mBAAO,KAAK,OAAO;AAAA,UACvB;AAAA,QACJ,WAAW,UAAU,MAAM;AAEvB,iBAAO,KAAK,OAAO;AAAA,QACvB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IAEA,aAAa;AAGT,YAAM,OAAO,IAAI,KAAK,WAAW;AACjC,WAAK,MAAM;AAIX,YAAM,OAAO,OAAO,SAAS;AAC7B,YAAM,eAAe,KAAK,WAAW,IAAI;AACzC,UAAI,cAAc;AACd,cAAM,kBAAkB,IAAI,aAAa;AACzC,wBAAgB,MAAM;AAAA,MAC1B,OAAO;AAAA,MAEP;AAAA,IACJ;AAAA,IAEA,YAAY;AAGR,YAAM,OAAO,IAAI,KAAK,WAAW;AACjC,WAAK,KAAK;AAIV,YAAM,OAAO,OAAO,SAAS;AAC7B,YAAM,eAAe,KAAK,WAAW,IAAI;AACzC,UAAI,cAAc;AACd,cAAM,kBAAkB,IAAI,aAAa;AACzC,wBAAgB,KAAK;AAAA,MACzB,OAAO;AAAA,MAEP;AAAA,IACJ;AAAA,EAEJ;",
  "names": []
}
